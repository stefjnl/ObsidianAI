@page "/"
@rendermode InteractiveServer
@implements IAsyncDisposable
@using ObsidianAI.Web.Models
@using ObsidianAI.Web.Services
@using ObsidianAI.Web.Components.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.RegularExpressions
@using System.Text.Json
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.WebUtilities
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject ILogger<Chat> Logger

<ChatHeader OnVaultClick="OpenVault" OnSettingsClick="OpenSettings" OnHistoryClick="ShowHistory" />

<PrivacyWarning IsVisible="@isOpenRouter" />

@if (isSidebarOpen)
{
    <ConversationSidebar
        Conversations="conversationSummaries"
        SelectedConversationId="currentConversationId"
    IsLoading="isLoadingConversations"
        OnConversationSelected="HandleConversationSelectedAsync"
        OnClose="CloseSidebar"
        OnNewConversation="HandleNewConversationAsync"
        OnDeleteConversation="HandleDeleteConversationAsync" />
}

<ChatArea Messages="@conversationHistory"
          OnActionConfirmed="HandleActionConfirmed"
          OnActionCancelled="HandleActionCancelled"
          OnActionEdit="HandleActionEdit" />

<ChatInput MessageText="@currentMessage"
           MessageTextChanged="OnMessageTextChanged"
           IsProcessing="@isProcessing"
           QuickActions="@quickActions"
           OnSendMessage="SendMessage"
           OnQuickAction="HandleQuickActionCallback" />

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> conversationHistory = new();
    private List<QuickAction> quickActions = new();
    private string currentMessage = string.Empty;
    private bool isProcessing = false;
    private bool isStreaming = false;
    private ChatMessage? currentAiMessage;
    private string llmProvider = string.Empty;
    private bool isOpenRouter = false;
    private int tokenBatchCount = 0;
    private const int TokenBatchSize = 3;
    private Guid? currentConversationId;
    private List<ConversationSummary> conversationSummaries = new();
    private bool isSidebarOpen;
    private bool isLoadingConversations;
    private bool isLoadingConversation;
    private string? pendingUserMessageClientId;
    private string? pendingAssistantMessageClientId;
    private static readonly Regex FileOpPattern1 = new(
        @"(?i)(append|create|write|modify|patch|delete)\s+to\s+file:\s*[`""']?([^`""'\n]+\.md)[`""']?\s+with\s+content:\s*[""']([^""'\n]+)[""']",
        RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.NonBacktracking,
        TimeSpan.FromMilliseconds(100));
    private static readonly Regex FileOpPattern2 = new(
        @"(?i)(append|create|write|modify|patch|delete)\s+(?:the\s+)?(?:content:?\s*)?[""']([^""'\n]+?)[""']?\s+(?:to|in)\s+(?:the\s+)?(?:file:?\s*)?[`""']?([^`""'\n.]+\.md)",
        RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.NonBacktracking,
        TimeSpan.FromMilliseconds(100));
    private static readonly Regex CompletedOpPattern = new(
        @"(?i)(created|appended|modified|patched|wrote)\s+(?:to\s+)?(?:file:?\s*)?[`""']?([^`""'\n]+\.md)",
        RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.NonBacktracking,
        TimeSpan.FromMilliseconds(100));

    protected override async Task OnInitializedAsync()
    {
        await FetchLlmProvider();
        await InitializeSignalR();
        await LoadQuickActions();
        await RefreshConversationListAsync();
        await TryLoadConversationFromQueryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
        }
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveToken", (token) =>
        {
            InvokeAsync(() =>
            {
                if (currentAiMessage != null)
                {
                    // Find the message in the list
                    var index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
                    if (index >= 0)
                    {
                        // Create updated message (remove processing indicator on first token)
                        currentAiMessage = currentAiMessage with
                        {
                            Content = currentAiMessage.Content + token,
                            IsProcessing = false
                        };
                        
                        // Replace in list
                        conversationHistory[index] = currentAiMessage;
                        
                        // Implement token batching: only update UI every N tokens
                        tokenBatchCount++;
                        if (tokenBatchCount >= TokenBatchSize)
                        {
                            tokenBatchCount = 0;
                            try
                            {
                                StateHasChanged();
                            }
                            catch (InvalidOperationException)
                            {
                                // Component may have been disposed, ignore
                            }
                        }
                    }
                }
            });
        });

        hubConnection.On<string>("Metadata", metadataJson =>
        {
            _ = HandleMetadataAsync(metadataJson);
        });

        hubConnection.On<object>("StatusUpdate", (update) =>
        {
            InvokeAsync(() =>
            {
                if (currentAiMessage != null)
                {
                    try
                    {
                        // Extract tool name from update object
                        var json = System.Text.Json.JsonSerializer.Serialize(update);
                        var statusObj = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(json);
                        
                        if (statusObj.TryGetProperty("tool", out var toolProp))
                        {
                            var toolName = toolProp.GetString();
                            
                            // Update the AI message with tool call status
                            var index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
                            if (index >= 0)
                            {
                                currentAiMessage = currentAiMessage with
                                {
                                    Content = currentAiMessage.Content + $"\n\nüîç Calling {toolName}...\n\n"
                                };
                                conversationHistory[index] = currentAiMessage;
                                StateHasChanged();
                            }
                        }
                    }
                    catch (Exception)
                    {
                        // Ignore errors parsing status update
                    }
                }
            });
        });

        hubConnection.On<string>("MessageComplete", (finalMessage) =>
        {
            InvokeAsync(async () =>
            {
                if (currentAiMessage != null)
                {
                    // Ensure any remaining tokens are displayed
                    tokenBatchCount = 0;
                    
                    // Parse the message for action cards or search results
                    await ParseResponseForComponents(finalMessage);

                    var index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
                    if (index >= 0)
                    {
                        currentAiMessage = currentAiMessage with { IsProcessing = false };
                        conversationHistory[index] = currentAiMessage;
                    }
                    
                    currentAiMessage = null;
                    isProcessing = false;
                    isStreaming = false;
                    
                    try
                    {
                        StateHasChanged();
                    }
                    catch (InvalidOperationException)
                    {
                        // Component may have been disposed, ignore
                    }
                    await ScrollToBottom();
                }
            });
        });

        hubConnection.On<string>("Error", (error) =>
        {
            InvokeAsync(() =>
            {
                if (currentAiMessage != null)
                {
                    var index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
                    if (index >= 0)
                    {
                        currentAiMessage = currentAiMessage with
                        {
                            Content = currentAiMessage.Content + $"\n\nError: {error}",
                            IsProcessing = false
                        };
                        conversationHistory[index] = currentAiMessage;
                    }
                    
                    currentAiMessage = null;
                    isProcessing = false;
                    isStreaming = false;
                    
                    try
                    {
                        StateHasChanged();
                    }
                    catch (InvalidOperationException)
                    {
                        // Component may have been disposed, ignore
                    }
                }
            });
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadQuickActions()
    {
        quickActions = await ChatService.GetQuickActionsAsync();
    }

    private async Task FetchLlmProvider()
    {
        var provider = await ChatService.GetLlmProviderAsync();
        llmProvider = provider;
        isOpenRouter = string.Equals(provider, "OpenRouter", StringComparison.OrdinalIgnoreCase);
        StateHasChanged();
    }

    private async Task EnsureConversationInitializedAsync()
    {
        if (currentConversationId.HasValue)
        {
            return;
        }

        try
        {
            isLoadingConversation = true;
            var conversationId = await ChatService.CreateConversationAsync();
            currentConversationId = conversationId;
            await RefreshConversationListAsync();
            UpdateConversationRoute(conversationId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize conversation");
            throw;
        }
        finally
        {
            isLoadingConversation = false;
            StateHasChanged();
        }
    }

    private async Task RefreshConversationListAsync()
    {
        try
        {
            isLoadingConversations = true;
            var summaries = await ChatService.ListConversationsAsync();
            conversationSummaries = summaries?.ToList() ?? new List<ConversationSummary>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load conversation summaries");
        }
        finally
        {
            isLoadingConversations = false;
            StateHasChanged();
        }
    }

    private async Task TryLoadConversationFromQueryAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query))
        {
            return;
        }

        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("conversationId", out var conversationValues) &&
            Guid.TryParse(conversationValues.FirstOrDefault(), out var conversationId))
        {
            await LoadConversationAsync(conversationId);
        }
    }

    private async Task LoadConversationAsync(Guid conversationId)
    {
        try
        {
            isLoadingConversation = true;
            var detail = await ChatService.LoadConversationAsync(conversationId);
            currentConversationId = detail.Id;
            conversationHistory = detail.Messages.ToList();
            await RefreshConversationListAsync();
            UpdateConversationRoute(detail.Id);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load conversation {ConversationId}", conversationId);
        }
        finally
        {
            isLoadingConversation = false;
            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isProcessing || isStreaming)
            return;

        await EnsureConversationInitializedAsync();

        var userMessage = new ChatMessage
        {
            Content = currentMessage,
            Sender = MessageSender.User,
            Timestamp = DateTime.UtcNow
        };

        conversationHistory.Add(userMessage);
        pendingUserMessageClientId = userMessage.Id;
        var messageToSend = currentMessage;
        currentMessage = string.Empty;
        isProcessing = true;
        isStreaming = true;

        // Create a placeholder AI message for streaming
        currentAiMessage = new ChatMessage
        {
            Content = string.Empty,
            Sender = MessageSender.AI,
            Timestamp = DateTime.UtcNow,
            IsProcessing = true,
            ProcessingType = ProcessingType.Thinking
        };

        conversationHistory.Add(currentAiMessage);
        pendingAssistantMessageClientId = currentAiMessage.Id;
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                // Send message via SignalR for streaming
                await hubConnection.SendAsync("StreamMessage", messageToSend, currentConversationId?.ToString(), conversationHistory);
            }
            else
            {
                throw new Exception("SignalR connection is not established.");
            }
        }
        catch (Exception ex)
        {
            // Handle connection errors
            if (currentAiMessage != null)
            {
                var index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
                if (index >= 0)
                {
                    currentAiMessage = currentAiMessage with
                    {
                        Content = $"Connection error: {ex.Message}",
                        IsProcessing = false
                    };
                    conversationHistory[index] = currentAiMessage;
                }
                
                currentAiMessage = null;
                isProcessing = false;
                isStreaming = false;
            }
            StateHasChanged();
        }
    }

    private Task OnMessageTextChanged(string newValue)
    {
        currentMessage = newValue;
        return Task.CompletedTask;
    }

    private Task HandleQuickActionCallback(QuickAction action)
    {
        currentMessage = action.Prefix;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleConversationSelectedAsync(Guid conversationId)
    {
        isSidebarOpen = false;
        if (currentConversationId == conversationId)
        {
            StateHasChanged();
            return;
        }

        if (conversationId == Guid.Empty)
        {
            await HandleNewConversationAsync();
            return;
        }

        await LoadConversationAsync(conversationId);
    }

    private async Task HandleNewConversationAsync()
    {
        try
        {
            isLoadingConversation = true;
            var conversationId = await ChatService.CreateConversationAsync();
            currentConversationId = conversationId;
            conversationHistory.Clear();
            pendingAssistantMessageClientId = null;
            pendingUserMessageClientId = null;
            await RefreshConversationListAsync();
            UpdateConversationRoute(conversationId);
            isSidebarOpen = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create new conversation");
        }
        finally
        {
            isLoadingConversation = false;
            StateHasChanged();
        }
    }

    private async Task HandleDeleteConversationAsync(Guid conversationId)
    {
        try
        {
            await ChatService.DeleteConversationAsync(conversationId);
            if (currentConversationId == conversationId)
            {
                currentConversationId = null;
                conversationHistory.Clear();
                ClearConversationRoute();
            }
            await RefreshConversationListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete conversation {ConversationId}", conversationId);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void CloseSidebar()
    {
        isSidebarOpen = false;
        StateHasChanged();
    }

    private async Task HandleMetadataAsync(string metadataJson)
    {
        StreamingMetadata? metadata = null;
        try
        {
            metadata = JsonSerializer.Deserialize<StreamingMetadata>(metadataJson, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (JsonException ex)
        {
            Logger.LogError(ex, "Invalid metadata payload: {Metadata}", metadataJson);
            return;
        }

        if (metadata == null)
        {
            return;
        }

        await InvokeAsync(async () =>
        {
            var conversationId = metadata.ConversationId;
            if (!currentConversationId.HasValue || currentConversationId != conversationId)
            {
                currentConversationId = conversationId;
                UpdateConversationRoute(conversationId);
            }

            if (!string.IsNullOrEmpty(pendingUserMessageClientId))
            {
                var userIndex = conversationHistory.FindLastIndex(m => m.Id == pendingUserMessageClientId);
                if (userIndex >= 0)
                {
                    conversationHistory[userIndex] = conversationHistory[userIndex] with
                    {
                        Id = metadata.UserMessageId.ToString()
                    };
                }
                pendingUserMessageClientId = null;
            }

            if (!string.IsNullOrEmpty(pendingAssistantMessageClientId))
            {
                var assistantIndex = conversationHistory.FindLastIndex(m => m.Id == pendingAssistantMessageClientId);
                if (assistantIndex >= 0)
                {
                    var updatedMessage = conversationHistory[assistantIndex] with
                    {
                        Id = metadata.AssistantMessageId.ToString()
                    };

                    if (metadata.FileOperation != null)
                    {
                        updatedMessage = updatedMessage with
                        {
                            FileOperation = new FileOperationData
                            {
                                Action = metadata.FileOperation.Action,
                                FilePath = metadata.FileOperation.FilePath
                            }
                        };
                    }

                    conversationHistory[assistantIndex] = updatedMessage;
                    currentAiMessage = updatedMessage;
                }

                pendingAssistantMessageClientId = null;
            }

            await RefreshConversationListAsync();
            StateHasChanged();
        });
    }

    private void UpdateConversationRoute(Guid conversationId)
    {
        var target = NavigationManager.GetUriWithQueryParameter("conversationId", conversationId.ToString());
        NavigationManager.NavigateTo(target, replace: true);
    }

    private void ClearConversationRoute()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (string.IsNullOrEmpty(uri.Query))
        {
            return;
        }

        var baseUri = uri.GetLeftPart(UriPartial.Path);
        NavigationManager.NavigateTo(baseUri, replace: true);
    }

    private async Task HandleActionConfirmed(string actionId)
    {
        // Find the message with this action card
        var message = conversationHistory.FirstOrDefault(m => m.ActionCard?.Id == actionId);
        if (message == null || message.ActionCard == null) return;

        // Update the action card status to Processing
        message = message with
        {
            ActionCard = message.ActionCard with
            {
                Status = ActionCardStatus.Processing
            }
        };

        // Update in the list
        var index = conversationHistory.IndexOf(conversationHistory.First(m => m.ActionCard?.Id == actionId));
        conversationHistory[index] = message;
        StateHasChanged();

        try
        {
            // Route single-file actions to Modify; multi-file to Reorganize
            if (message.ActionCard.Actions.Count == 1)
            {
                var action = message.ActionCard.Actions[0];
                var modifyRequest = new ModifyRequest
                {
                    Operation = action.Operation,
                    FilePath = action.Source,
                    Content = action.Content,
                    ConfirmationId = actionId
                };

                var response = await ChatService.ModifyAsync(modifyRequest);

                // Update the action card with the result
                message = message with
                {
                    ActionCard = message.ActionCard with
                    {
                        Status = response.Success ? ActionCardStatus.Completed : ActionCardStatus.Failed,
                        StatusMessage = response.Message
                    }
                };
            }
            else
            {
                // Multi-action: use existing Reorganize flow
                var reorganizeRequest = new ReorganizeRequest
                {
                    Operation = message.ActionCard.OperationType.ToString(),
                    FileOperations = message.ActionCard.Actions.Select(a => new FileOperation
                    {
                        SourcePath = a.Source,
                        DestinationPath = a.Destination,
                        Operation = a.Type.ToString()
                    }).ToList(),
                    ConfirmationId = actionId
                };

                var response = await ChatService.ReorganizeAsync(reorganizeRequest);

                message = message with
                {
                    ActionCard = message.ActionCard with
                    {
                        Status = response.Success ? ActionCardStatus.Completed : ActionCardStatus.Failed,
                        StatusMessage = response.Message
                    }
                };
            }

            conversationHistory[index] = message;
        }
        catch (Exception ex)
        {
            message = message with
            {
                ActionCard = message.ActionCard! with
                {
                    Status = ActionCardStatus.Failed,
                    StatusMessage = $"Failed to execute actions: {ex.Message}"
                }
            };

            conversationHistory[index] = message;
        }

        StateHasChanged();
    }

    private Task HandleActionCancelled(string actionId)
    {
        // Find the message with this action card
        var message = conversationHistory.FirstOrDefault(m => m.ActionCard?.Id == actionId);
        if (message != null && message.ActionCard != null)
        {
            // Update the action card status
            message = message with
            {
                ActionCard = message.ActionCard with
                {
                    Status = ActionCardStatus.Cancelled,
                    StatusMessage = "Action cancelled by user"
                }
            };

            // Update in the list
            var index = conversationHistory.IndexOf(conversationHistory.First(m => m.ActionCard?.Id == actionId));
            conversationHistory[index] = message;

            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private async Task HandleActionEdit(string actionId)
    {
        // For now, just show a message
        // In a real implementation, this would open an edit dialog
        var editMessage = new ChatMessage
        {
            Content = "Edit functionality not yet implemented. Please cancel and retry with a different request.",
            Sender = MessageSender.AI,
            Timestamp = DateTime.UtcNow
        };

        conversationHistory.Add(editMessage);
        StateHasChanged();
        await ScrollToBottom();
    }

    private Task ParseResponseForComponents(string response)
    {
        if (string.IsNullOrWhiteSpace(response))
        {
            return Task.CompletedTask;
        }

        if (response.Length > 10_000)
        {
            Logger?.LogWarning("Assistant response too large for parsing ({Length})", response.Length);
            return Task.CompletedTask;
        }

        try
        {
            if (ContainsConfirmationKeywords(response))
            {
                var fileOpMatch = FileOpPattern1.Match(response);

                if (!fileOpMatch.Success)
                {
                    fileOpMatch = FileOpPattern2.Match(response);
                }

                if (fileOpMatch.Success)
                {
                    var operation = fileOpMatch.Groups[1].Value.Trim();
                    string content;
                    string filePath;

                    if (response.Contains("with content:", StringComparison.OrdinalIgnoreCase))
                    {
                        filePath = fileOpMatch.Groups[2].Value.Trim();
                        content = fileOpMatch.Groups[3].Value.Trim();
                    }
                    else
                    {
                        content = fileOpMatch.Groups[2].Value.Trim();
                        filePath = fileOpMatch.Groups[3].Value.Trim();
                    }

                    var actionCard = new ActionCardData
                    {
                        Id = Guid.NewGuid().ToString(),
                        Title = $"{char.ToUpper(operation[0])}{operation.Substring(1).ToLower()} Content",
                        OperationType = operation.ToLowerInvariant() switch
                        {
                            "append" => ActionOperationType.Other,
                            "create" => ActionOperationType.Create,
                            "delete" => ActionOperationType.Delete,
                            _ => ActionOperationType.Other
                        },
                        Actions = new List<PlannedAction>
                        {
                            new PlannedAction
                            {
                                Type = operation.ToLowerInvariant() switch
                                {
                                    "append" => ActionType.Modify,
                                    "create" => ActionType.Create,
                                    "delete" => ActionType.Delete,
                                    "modify" => ActionType.Modify,
                                    "patch" => ActionType.Modify,
                                    "write" => ActionType.Modify,
                                    _ => ActionType.Other
                                },
                                Source = filePath,
                                Destination = filePath,
                                Content = content,
                                Operation = operation.ToLowerInvariant(),
                                Description = $"{char.ToUpper(operation[0])}{operation.Substring(1).ToLower()} \"{content}\" ‚Üí {filePath}"
                            }
                        },
                        Status = ActionCardStatus.Pending
                    };

                    AttachActionCard(actionCard);
                    return Task.CompletedTask;
                }
            }

            var completedOpMatch = CompletedOpPattern.Match(response);
            if (completedOpMatch.Success)
            {
                var action = completedOpMatch.Groups[1].Value.Trim();
                var filePath = completedOpMatch.Groups[2].Value.Trim();

                var fileOperationData = new FileOperationData
                {
                    Action = char.ToUpper(action[0]) + action.Substring(1),
                    FilePath = filePath
                };

                AttachFileOperation(fileOperationData);
            }
        }
        catch (RegexMatchTimeoutException ex)
        {
            Logger?.LogError(ex, "Regex timeout while parsing assistant response");
        }

        return Task.CompletedTask;
    }

    private void AttachActionCard(ActionCardData actionCard)
    {
        var index = -1;
        if (currentAiMessage != null)
        {
            index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
        }
        if (index < 0)
        {
            index = conversationHistory.FindLastIndex(m => m.Sender == MessageSender.AI);
        }

        if (index >= 0)
        {
            var msg = conversationHistory[index];
            var updated = msg with
            {
                ActionCard = actionCard,
                ProcessingType = ProcessingType.None
            };
            conversationHistory[index] = updated;

            if (currentAiMessage != null && currentAiMessage.Id == msg.Id)
            {
                currentAiMessage = updated;
            }

            StateHasChanged();
        }
    }

    private void AttachFileOperation(FileOperationData fileOperationData)
    {
        var index = -1;
        if (currentAiMessage != null)
        {
            index = conversationHistory.FindLastIndex(m => m.Id == currentAiMessage.Id);
        }
        if (index < 0)
        {
            index = conversationHistory.FindLastIndex(m => m.Sender == MessageSender.AI);
        }

        if (index >= 0)
        {
            var msg = conversationHistory[index];
            var updated = msg with
            {
                FileOperation = fileOperationData,
                ProcessingType = ProcessingType.None
            };
            conversationHistory[index] = updated;

            if (currentAiMessage != null && currentAiMessage.Id == msg.Id)
            {
                currentAiMessage = updated;
            }

            StateHasChanged();
        }
    }

    private static bool ContainsConfirmationKeywords(string text)
    {
        var lower = text.ToLowerInvariant();
        return lower.Contains("confirm") ||
        lower.Contains("confirmation") ||
        lower.Contains("proceed") ||
        lower.Contains("are you sure") ||
        lower.Contains("please verify") ||
        lower.Contains("i will perform") ||
        lower.Contains("planned operations");
    }

    private static ActionOperationType DetermineOperationType(List<PlannedAction> actions)
    {
        if (actions.All(a => a.Type == ActionType.Move))
            return ActionOperationType.Move;
        if (actions.All(a => a.Type == ActionType.Delete))
            return ActionOperationType.Delete;
        if (actions.All(a => a.Type == ActionType.Create))
            return ActionOperationType.Create;
        if (actions.Count > 3)
            return ActionOperationType.Reorganize;
        return ActionOperationType.Other;
    }

    private static bool ExtractPaths(string text, out List<string> paths)
    {
        paths = ExtractAllPaths(text);
        return paths.Count >= 2;
    }

    private static List<string> ExtractAllPaths(string text)
    {
        var results = new HashSet<string>();

        // Pattern 1: Quoted paths
        var quotedMatches = System.Text.RegularExpressions.Regex.Matches(text, @"""([^""]+\.[a-zA-Z0-9]+)""");
        foreach (System.Text.RegularExpressions.Match m in quotedMatches)
        {
            results.Add(m.Groups[1].Value);
        }

        // Pattern 2: Backtick paths
        var backtickMatches = System.Text.RegularExpressions.Regex.Matches(text, @"`([^`]+\.[a-zA-Z0-9]+)`");
        foreach (System.Text.RegularExpressions.Match m in backtickMatches)
        {
            results.Add(m.Groups[1].Value);
        }

        // Pattern 3: Paths with slashes and extensions
        var slashMatches = System.Text.RegularExpressions.Regex.Matches(text, @"([\w\-./\\]+\.[a-zA-Z0-9]+)");
        foreach (System.Text.RegularExpressions.Match m in slashMatches)
        {
            var path = m.Groups[1].Value.Trim();
            if (!path.StartsWith("http") && !path.StartsWith("www"))
            {
                results.Add(path);
            }
        }

        return results.ToList();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100); // Small delay to ensure DOM is updated
        await jsRuntime.InvokeVoidAsync("scrollToBottom");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void OpenVault()
    {
        var vaultMessage = new ChatMessage
        {
            Content = "Vault feature is coming soon!",
            Sender = MessageSender.AI,
            Timestamp = DateTime.UtcNow
        };
        conversationHistory.Add(vaultMessage);
        StateHasChanged();
    }

    private void OpenSettings()
    {
        var settingsMessage = new ChatMessage
        {
            Content = "Settings feature is coming soon!",
            Sender = MessageSender.AI,
            Timestamp = DateTime.UtcNow
        };
        conversationHistory.Add(settingsMessage);
        StateHasChanged();
    }

    private async Task ShowHistory()
    {
        isSidebarOpen = true;
        StateHasChanged();

        if (!isLoadingConversations)
        {
            try
            {
                await RefreshConversationListAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to refresh conversations when opening history");
            }
        }
    }

    private sealed record StreamingMetadata(Guid ConversationId, Guid UserMessageId, Guid AssistantMessageId, StreamingFileOperation? FileOperation);

    private sealed record StreamingFileOperation(string Action, string FilePath);
}