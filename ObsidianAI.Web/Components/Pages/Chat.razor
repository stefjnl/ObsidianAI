@page "/"
@rendermode InteractiveServer
@implements IAsyncDisposable
@using ObsidianAI.Web.Models
@using ObsidianAI.Web.Services
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic
@using System.Threading
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject ILogger<Chat> Logger
@inject IConfiguration Configuration

<ChatHeader CurrentProvider="@llmProvider" OnProviderChanged="HandleProviderChangedAsync" />

<ChatArea Messages="@conversationHistory" />

<ChatInput MessageText="@currentMessage"
           MessageTextChanged="OnMessageTextChanged"
           IsProcessing="@isProcessing"
           QuickActions="@quickActions"
           OnSendMessage="SendMessage" />

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> conversationHistory = new();
    private List<QuickAction> quickActions = new();
    private string currentMessage = string.Empty;
    private bool isProcessing = false;
    private bool isStreaming = false;
    private ChatMessage? currentAiMessage;
    private string llmProvider = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FetchLlmProvider();
        await InitializeSignalR();
        await LoadQuickActions();
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveToken", (token) =>
        {
            InvokeAsync(() =>
            {
                if (currentAiMessage != null)
                {
                    var index = conversationHistory.FindLastIndex(m => m.ClientId == currentAiMessage.ClientId);
                    if (index >= 0)
                    {
                        currentAiMessage = currentAiMessage with
                        {
                            Content = currentAiMessage.Content + token,
                            IsProcessing = false
                        };
                        conversationHistory[index] = currentAiMessage;
                        StateHasChanged();
                    }
                }
            });
        });

        hubConnection.On<string>("MessageComplete", (finalMessage) =>
        {
            InvokeAsync(async () =>
            {
                if (currentAiMessage != null)
                {
                    var index = conversationHistory.FindLastIndex(m => m.ClientId == currentAiMessage.ClientId);
                    if (index >= 0)
                    {
                        currentAiMessage = currentAiMessage with
                        {
                            Content = finalMessage,
                            IsProcessing = false
                        };
                        conversationHistory[index] = currentAiMessage;
                    }
                    
                    currentAiMessage = null;
                    isProcessing = false;
                    isStreaming = false;
                    
                    StateHasChanged();
                    await ScrollToBottom();
                }
            });
        });

        hubConnection.On<string>("Error", (error) =>
        {
            InvokeAsync(() =>
            {
                if (currentAiMessage != null)
                {
                    var index = conversationHistory.FindLastIndex(m => m.ClientId == currentAiMessage.ClientId);
                    if (index >= 0)
                    {
                        currentAiMessage = currentAiMessage with
                        {
                            Content = currentAiMessage.Content + $"\n\nError: {error}",
                            IsProcessing = false
                        };
                        conversationHistory[index] = currentAiMessage;
                    }
                    
                    currentAiMessage = null;
                    isProcessing = false;
                    isStreaming = false;
                    
                    StateHasChanged();
                }
            });
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadQuickActions()
    {
        var actions = await ChatService.GetQuickActionsAsync();
        quickActions = actions.ToList();
    }

    private async Task FetchLlmProvider()
    {
        var provider = await ChatService.GetLlmProviderAsync();
        llmProvider = provider;
        StateHasChanged();
    }

    private async Task HandleProviderChangedAsync(string provider)
    {
        var result = await ChatService.SwitchLlmProviderAsync(provider);
        llmProvider = result.ActiveProvider;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
        {
            return;
        }

        if (isProcessing || isStreaming)
            return;

        var userClientId = Guid.NewGuid().ToString();
        var userMessage = new ChatMessage
        {
            ClientId = userClientId,
            Content = currentMessage,
            Sender = MessageSender.User,
            Timestamp = DateTime.UtcNow,
            IsPending = true
        };

        conversationHistory.Add(userMessage);
        var messageToSend = currentMessage;
        currentMessage = string.Empty;
        isProcessing = true;
        isStreaming = true;

        var assistantClientId = Guid.NewGuid().ToString();
        currentAiMessage = new ChatMessage
        {
            ClientId = assistantClientId,
            Content = string.Empty,
            Sender = MessageSender.AI,
            Timestamp = DateTime.UtcNow,
            IsProcessing = true,
            ProcessingType = ProcessingType.Thinking,
            IsPending = true
        };

        conversationHistory.Add(currentAiMessage);
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("StreamMessage", messageToSend, Guid.NewGuid().ToString());
            }
            else
            {
                throw new Exception("SignalR connection is not established.");
            }
        }
        catch (Exception ex)
        {
            if (currentAiMessage != null)
            {
                var index = conversationHistory.FindLastIndex(m => m.ClientId == currentAiMessage.ClientId);
                if (index >= 0)
                {
                    currentAiMessage = currentAiMessage with
                    {
                        Content = $"Connection error: {ex.Message}",
                        IsProcessing = false
                    };
                    conversationHistory[index] = currentAiMessage;
                }
                
                currentAiMessage = null;
                isProcessing = false;
                isStreaming = false;
            }
            StateHasChanged();
        }
    }

    private Task OnMessageTextChanged(string newValue)
    {
        currentMessage = newValue;
        return Task.CompletedTask;
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(100);
            await jsRuntime.InvokeVoidAsync("scrollToBottom");
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("prerendering"))
        {
            Logger.LogDebug("ScrollToBottom skipped during prerendering");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to scroll to bottom");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}