@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<AttachmentUploader> Logger
@inject IJSRuntime JSRuntime
@using System.Net.Http.Headers

@if (ConversationId.HasValue)
{
    <div class="attachment-uploader">
        <InputFile id="attachment-file-input" OnChange="UploadAttachment" accept=".txt,.md,.json" multiple style="display: none;" />
        <div class="attachment-list">
            @foreach (var attachment in Attachments)
            {
                <div class="attachment-item">
                    <span>@attachment.Filename (@attachment.FileType)</span>
                    <button @onclick="() => DownloadAttachment(attachment.Id)">Download</button>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public Guid? ConversationId { get; set; }
    [Parameter] public EventCallback OnAttachmentUploaded { get; set; }

    private List<AttachmentSummary> Attachments { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (ConversationId.HasValue)
        {
            await LoadAttachments();
        }
    }

    public async Task TriggerFileSelection()
    {
        await JSRuntime.InvokeVoidAsync("triggerAttachmentFileInputClick");
    }

    private async Task UploadAttachment(InputFileChangeEventArgs e)
    {
        if (!ConversationId.HasValue) return;

        var httpClient = HttpClientFactory.CreateClient("ObsidianAI.Api");

        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > 1_000_000) // 1MB limit
            {
                Logger.LogWarning("File {Filename} exceeds size limit", file.Name);
                continue;
            }

            var extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!new[] { ".txt", ".md", ".json" }.Contains(extension))
            {
                Logger.LogWarning("File {Filename} has unsupported extension", file.Name);
                continue;
            }

            // Read the incoming file into memory so the content can be resent safely by HttpClient retries.
            // Input files are limited to 1MB above, so buffering into memory is acceptable here.
            var content = new MultipartFormDataContent();

            await using var stream = file.OpenReadStream();
            var buffer = new byte[file.Size];
            var totalRead = 0;
            while (totalRead < buffer.Length)
            {
                var read = await stream.ReadAsync(buffer, totalRead, buffer.Length - totalRead);
                if (read == 0) break;
                totalRead += read;
            }

            var fileContent = new ByteArrayContent(buffer, 0, totalRead);
            if (!string.IsNullOrWhiteSpace(file.ContentType))
            {
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);
            }

            content.Add(fileContent, "file", file.Name);

            try
            {
                var response = await httpClient.PostAsync($"/conversations/{ConversationId}/attachments", content);
                if (response.IsSuccessStatusCode)
                {
                    await LoadAttachments();
                    await OnAttachmentUploaded.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Logger.LogError("Failed to upload attachment: {Error}", error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error uploading attachment {Filename}", file.Name);
            }
        }
    }

    private async Task LoadAttachments()
    {
        if (!ConversationId.HasValue) return;

        var httpClient = HttpClientFactory.CreateClient("ObsidianAI.Api");

        try
        {
            var response = await httpClient.GetAsync($"/conversations/{ConversationId}/attachments");
            if (response.IsSuccessStatusCode)
            {
                var attachments = await response.Content.ReadFromJsonAsync<List<AttachmentSummary>>();
                if (attachments != null)
                {
                    Attachments = attachments;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading attachments");
        }
    }

    private Task DownloadAttachment(Guid attachmentId)
    {
        // For now, just log. In a real implementation, fetch the content and download
        Logger.LogInformation("Download attachment {Id}", attachmentId);
        return Task.CompletedTask;
    }

    private record AttachmentSummary(Guid Id, string Filename, string FileType, DateTime CreatedAt);
}