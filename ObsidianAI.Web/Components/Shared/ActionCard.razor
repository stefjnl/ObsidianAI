@using ObsidianAI.Web.Models
@inject NavigationManager NavigationManager

<div class="action-card-container">
    <div class="action-card-header">
        üìã PLANNED ACTIONS
    </div>
    
    @* Display reflection reasoning and warnings for server-side ActionCards *@
    @if (!string.IsNullOrEmpty(Card.ReflectionReasoning) || (Card.ReflectionWarnings?.Any() ?? false))
    {
        <div class="reflection-metadata">
            @if (!string.IsNullOrEmpty(Card.ReflectionReasoning))
            {
                <div class="reflection-reasoning">
                    <button class="btn-expand" @onclick="ToggleReasoningExpanded">
                        @(ReasoningExpanded ? "‚ñº" : "‚ñ∂") Why is confirmation needed?
                    </button>
                    @if (ReasoningExpanded)
                    {
                        <div class="reasoning-content">
                            üí° @Card.ReflectionReasoning
                        </div>
                    }
                </div>
            }
            
            @if (Card.ReflectionWarnings?.Any() ?? false)
            {
                <div class="reflection-warnings">
                    <strong>‚ö†Ô∏è Important Warnings:</strong>
                    <ul>
                        @foreach (var warning in Card.ReflectionWarnings)
                        {
                            <li>@warning</li>
                        }
                    </ul>
                </div>
            }
        </div>
    }
    
    <ul class="action-list">
        @foreach (var action in DisplayedActions)
        {
            <li>
                <span>@action.Icon</span>
                <span>@action.Description</span>
            </li>
        }
    </ul>
    
    @if (Card.HasMoreActions)
    {
        <span class="view-all" @onclick="ToggleShowAll">
            ... and @Card.HiddenActionCount more @(ShowAllActions ? "¬∑ Show less" : "¬∑ View all")
        </span>
    }
    
    @if (Card.Status == ActionCardStatus.Pending)
    {
        <div class="action-buttons">
            <button class="btn btn-confirm" type="button" @onclick="ConfirmAction">‚úì Confirm</button>
            <button class="btn btn-cancel" type="button" @onclick="CancelAction">‚úó Cancel</button>
            <button class="btn btn-secondary" type="button" @onclick="EditAction">Edit Selection</button>
        </div>
    }
    else if (Card.Status == ActionCardStatus.Processing)
    {
        <div class="status-indicator">
            <div class="spinner"></div>
            Processing actions...
        </div>
    }
    else if (Card.Status == ActionCardStatus.Completed)
    {
        <div class="status-indicator" style="color: #4a9d5f;">
            ‚úì @Card.StatusMessage
        </div>
        @if (!string.IsNullOrEmpty(Card.Actions.FirstOrDefault()?.Source))
        {
            <div class="action-buttons" style="margin-top: 12px;">
                <button class="btn btn-secondary" type="button" @onclick="ViewFile">üìÑ View file</button>
            </div>
        }
    }
    else if (Card.Status == ActionCardStatus.Cancelled)
    {
        <div class="status-indicator" style="color: #d64545;">
            ‚úó @Card.StatusMessage
        </div>
    }
    else if (Card.Status == ActionCardStatus.Failed)
    {
        <div class="status-indicator" style="color: #d64545;">
            ‚úó @Card.StatusMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public ActionCardData Card { get; set; } = default!;
    
    [Parameter]
    public EventCallback<string> OnConfirmed { get; set; }
    
    [Parameter]
    public EventCallback<string> OnCancelled { get; set; }
    
    [Parameter]
    public EventCallback<string> OnEdit { get; set; }
    
    private bool ShowAllActions { get; set; } = false;
    private bool ReasoningExpanded { get; set; } = false;
    
    private List<PlannedAction> DisplayedActions =>
        ShowAllActions || !Card.HasMoreActions
            ? Card.Actions
            : Card.Actions.Take(3).ToList();
    
    private void ToggleShowAll()
    {
        ShowAllActions = !ShowAllActions;
    }
    
    private void ToggleReasoningExpanded()
    {
        ReasoningExpanded = !ReasoningExpanded;
    }
    
    private async Task ConfirmAction()
    {
        await OnConfirmed.InvokeAsync(Card.Id);
    }
    
    private async Task CancelAction()
    {
        await OnCancelled.InvokeAsync(Card.Id);
    }
    
    private async Task EditAction()
    {
        await OnEdit.InvokeAsync(Card.Id);
    }

    private void ViewFile()
    {
        var firstAction = Card.Actions.FirstOrDefault();
        if (firstAction != null && !string.IsNullOrEmpty(firstAction.Source))
        {
            // Encode the file path for Obsidian URI
            var encodedPath = Uri.EscapeDataString(firstAction.Source);
            // Use a generic vault name; in real implementation this could be configurable
            var obsidianUri = $"obsidian://open?vault=ObsidianVault&file={encodedPath}";
            // Navigate to the Obsidian URI
            NavigationManager.NavigateTo(obsidianUri, forceLoad: true);
        }
    }
}