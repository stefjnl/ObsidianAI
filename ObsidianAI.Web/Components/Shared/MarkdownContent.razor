@using Markdig
@inject IJSRuntime JSRuntime

<div class="markdown-content" @ref="markdownElement">
    @((MarkupString)_cachedHtml)
</div>

@code {
    [Parameter]
    public string Content { get; set; } = string.Empty;

    private ElementReference markdownElement;
    private string _cachedHtml = string.Empty;
    private string _lastContent = string.Empty;
    private bool _needsHighlight = false;

    private static readonly MarkdownPipeline Pipeline = new MarkdownPipelineBuilder()
    .UseAdvancedExtensions()
    .UseSoftlineBreakAsHardlineBreak()
    .Build();

    protected override void OnParametersSet()
    {
        // Only re-convert if content actually changed
        if (_lastContent != Content)
        {
            _cachedHtml = ConvertMarkdown(Content);
            _lastContent = Content;
            _needsHighlight = true; // Flag for syntax highlighting after render
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Apply syntax highlighting only when content changes or first render
        if (firstRender || _needsHighlight)
        {
            _needsHighlight = false;
            try
            {
                await JSRuntime.InvokeVoidAsync("highlightCode", markdownElement);
            }
            catch (JSDisconnectedException)
            {
                // Circuit disconnected, ignore
            }
            catch (TaskCanceledException)
            {
                // Component disposed during async operation, ignore
            }
        }
    }

    private static string ConvertMarkdown(string markdown)
    {
        if (string.IsNullOrWhiteSpace(markdown))
            return string.Empty;

        try
        {
            return Markdown.ToHtml(markdown, Pipeline);
        }
        catch (Exception)
        {
            // Fallback for malformed markdown during streaming
            return $"<pre>{System.Net.WebUtility.HtmlEncode(markdown)}</pre>";
        }
    }
}