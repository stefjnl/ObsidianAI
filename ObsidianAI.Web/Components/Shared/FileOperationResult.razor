@using ObsidianAI.Web.Models
@inject IJSRuntime JSRuntime
@using System.Net

<div class="file-operation-result" role="status" aria-live="polite">
    <span class="result-icon" aria-hidden="true">
        @(Result?.Success == true ? "✓" : "✗")
    </span>
    <span class="result-message">
        @DisplayMessage
    </span>
    @if (HasPath)
    {
        <button class="btn view-file-btn" type="button" @onclick="OpenInObsidian" title="Open the file in Obsidian">
            [View file]
        </button>
    }
</div>

@code {
    [Parameter]
    public FileOperationResultData Result { get; set; } = new();

    [Parameter]
    public string VaultName { get; set; } = "obsidian-vault";

    private bool HasPath => !string.IsNullOrWhiteSpace(Result?.FilePath);

    private string DisplayMessage => !string.IsNullOrWhiteSpace(Result?.Message)
        ? Result!.Message!
        : $"{(string.IsNullOrWhiteSpace(Result?.Operation) ? "File updated" : Result!.Operation)}: {Result!.FilePath}";

    private async Task OpenInObsidian()
    {
        if (HasPath)
        {
            var encodedVault = Uri.EscapeDataString(VaultName);
            var encodedPath = Uri.EscapeDataString(Result!.FilePath!);
            var obsidianUri = $"obsidian://open?vault={encodedVault}&file={encodedPath}";
            await JSRuntime.InvokeVoidAsync("open", obsidianUri, "_blank");
        }
    }
}